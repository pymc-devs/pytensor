name: PyPI
# manually running for testing purposes
on:
  workflow_dispatch
#  push:
#    branches:
#      - main
#      - auto-release
#  pull_request:
#    branches: [main]
#  release:
#    types: [published]
#
## Cancels all previous workflow runs for pull requests that have not completed.
#concurrency:
#  # The concurrency group contains the workflow name and the branch name for pull requests
#  # or the commit hash for any other events.
#  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
#  cancel-in-progress: true

jobs:
  # The job to build precompiled pypi wheels.
  make_sdist:
    name: Make SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Build SDist
      run: pipx run build --sdist

    - uses: actions/upload-artifact@v3
      with:
        path: dist/*.tar.gz

    - uses: actions/upload-artifact@v3
      with:
        name: artifact
        path: dist/*

  # Note - I adapted the scripts to check installs and imports into the test-command contained in pyproject.toml to
  # avoid installing twice
  build_wheels:
      name: Build ${{ matrix.python-version }} wheels on ${{ matrix.platform }}
      runs-on: ${{ matrix.platform }}
      strategy:
        matrix:
            platform:
                - macos-12
                - windows-2022
                - ubuntu-20.04

      steps:
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0

        - name: Build wheels
          uses: pypa/cibuildwheel@v2.11.4

        - uses: actions/upload-artifact@v3
          with:
            path: ./wheelhouse/*.whl

  check_dist:
        name: Check dist
        needs: [make_sdist,build_wheels]
        runs-on: ubuntu-22.04
        steps:
          - uses: actions/download-artifact@v3
            with:
              name: artifact
              path: dist

          - run: pipx run twine check --strict dist/*

# Disabling for testing on fork
#  upload_pypi:
#    name: Upload to PyPI on release
#    needs: [build]
#    runs-on: ubuntu-latest
#    if: github.event_name == 'release' && github.event.action == 'published'
#    steps:
#      - uses: actions/download-artifact@v3
#        with:
#          name: artifact
#          path: dist
#      - uses: pypa/gh-action-pypi-publish@v1.6.4
#        with:
#          user: __token__
#          password: ${{ secrets.pypi_secret }}
